{"version":3,"sources":["hoc/Aux.js","components/Item/Item.js","components/UI/Button/Button.js","containers/NasaSearch/NasaSearch.js","components/TheSelectedItem/TheSelectedItem.js","containers/NasaSearch/SelectedItem/SelectedItem.js","App.js","serviceWorker.js","index.js"],"names":["aux","props","children","item","react_default","a","createElement","className","onClick","clicked","title","center","button","disabled","btnType","join","NasaSearch","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInputChange","event","preventDefault","target","value","type","checked","name","setState","defineProperty","state","searchValue","errorInput","image","video","errorCheckBox","handleSubmit","checkForImages","checkForVideos","axios","get","concat","then","res","updatedItems","data","collection","items","map","objectSpread","furtherFilteredItems","filter","media_type","console","log","filteredItems","catch","err","itemSelectedHandler","id","desc","onItemInfo","history","push","bind","assertThisInitialized","_this2","length","Item_Item","key","nasa_id","description","Aux","placeholder","required","onChange","Button_Button","Component","withRouter","theSelectedItem","src","alt","width","height","controls","autoPlay","loop","SelectedItem","handleBackClick","assets","filteredAssets","itemId","slice","_this3","itemImg","itemVid","TheSelectedItem_TheSelectedItem","href","App","handleItemInfo","img","itemImage","itemVideo","routes","Switch","Route","path","render","NasaSearch_SelectedItem_SelectedItem","assign","exact","containers_NasaSearch_NasaSearch","Redirect","to","Boolean","window","location","hostname","match","app","BrowserRouter","src_App_0","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fe112ae8.chunk.js","sourcesContent":["const aux = (props) => props.children\n\nexport default aux;","import React from \"react\";\n\nimport './Item.css';\n\nconst item = (props) => (\n    <article className=\"User\" onClick={props.clicked}>\n        <h3>{props.title}</h3>\n        <p className=\"Details\">\n        Center: {props.center} <br /> \n        {/* {props.description} <br /> <br /> {props.media_type} <br /> <br /> */}\n        \n        </p>\n    </article>\n);\nexport default item;","import React from 'react';\n\nimport './Button.css';\n\nconst button = (props) => (\n  <button\n    disabled={props.disabled} \n    className={[\"Button\", [props.btnType]].join(' ')}\n    onClick={props.clicked}>{props.children}\n  </button>\n);\n\nexport default button;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport {withRouter} from \"react-router-dom\";\n\nimport './NasaSearch.css';\nimport Aux from '../../hoc/Aux';\nimport Item from '../../components/Item/Item';\nimport Button from '../../components/UI/Button/Button';\n\nclass NasaSearch extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            searchValue: '',\n            image: true,\n            video: false,\n            items: [],\n            filteredItems: [],\n            // NasaForm: {\n            //     nasaSearch: {\n            //         elementType: 'input',\n            //         elementConfig: {\n            //             className: 'Input_Box',\n            //             type: 'text',\n            //             placeholder: 'Moon'\n            //         },\n            //         value: '',\n            //         validation: {\n            //         required: true,\n            //         minLength: 3,\n            //         maxLength: 25\n            //         },\n            //         valid: true\n            //     },\n            //     nasaCheckImage: {\n            //         elementType: 'input',\n            //         elementConfig: {\n            //             className: 'CheckBox',\n            //             type: 'checkbox',\n            //         },\n            //         defaultvalue: 'Image',\n            //         validation: {\n            //         required: true,\n            //         },\n            //         valid: true,\n            //         checked: true,\n            //     },\n            //     nasaCheckVideo: {\n            //         elementType: 'input',\n            //         elementConfig: {\n            //             className: 'CheckBox',\n            //             type: 'checkbox',\n            //         },\n            //         defaultvalue: 'Video',\n            //         validation: {\n            //             required: true,\n            //         },\n            //         valid: true,\n            //         checked: false,\n            //     }\n            // },\n            errorInput: '',\n            errorCheckBox: '',\n        }\n        this.handleInputChange = this.handleInputChange.bind(this);\n    }\n\n    handleInputChange = (event) => {\n        event.preventDefault();\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n\n        this.setState({ [name]: value });\n\n        if (this.state.searchValue !== '') {\n            this.setState({ errorInput: '' });\n        }\n\n        if (this.state.image !== this.state.video) {\n            this.setState({ errorCheckBox: '' });\n        }\n    }\n\n    handleSubmit = () => {\n        const searchValue = this.state.searchValue;\n        const checkForImages = this.state.image;\n        const checkForVideos = this.state.video;\n\n        if (searchValue === '') {\n            this.setState({ errorInput: 'Please Do Not Leave Empty' });\n            return;\n        }\n\n        axios.get(`https://images-api.nasa.gov/search?q=${searchValue}`)\n            .then( res => {\n                const items = res.data.collection.items;\n                const updatedItems = items.map(item => {\n                    return {\n                        ...item.data[0]\n                    }\n                });\n                if (checkForImages === true && checkForVideos === true) {\n                    this.setState({ errorCheckBox: 'Please Select Only 1 Checkbox' });\n                    return;\n                } else if (checkForImages === true && checkForVideos === false) {\n                    this.furtherFilteredItems = updatedItems.filter(item => item.media_type === 'image');\n                } else if (checkForImages === false && checkForVideos === true) {\n                    this.furtherFilteredItems = updatedItems.filter(item => item.media_type === 'video');\n                }\n                console.log(this.furtherFilteredItems);\n                this.setState({ items: updatedItems, filteredItems: this.furtherFilteredItems });\n            })\n            .catch(err => {\n                console.log(err);\n            });\n    }\n\n    itemSelectedHandler = (id, title, center, desc) => {\n        this.props.onItemInfo(id, this.state.image, this.state.video, title, center, desc);\n        this.props.history.push(\"/selectedItem\");\n    }\n\n    render() {\n        let items = <p className=\"no--item\"> No Items, Please Search </p>\n        if (this.state.filteredItems.length < 1 ) {\n        } else {\n            items = this.state.filteredItems.map(item => {\n                return  (\n                    <Item\n                    key={item.nasa_id}\n                    title={item.title}\n                    media_type={item.media_type}\n                    description={item.description}\n                    center={item.center}\n                    clicked={() => this.itemSelectedHandler(item.nasa_id, item.title, item.center, item.description,)}\n                    />\n                );\n            });\n        }\n\n        return (\n            <Aux>\n                <div className=\"nasa--box\">\n                    <h1>NASA Search <i className=\"fas fa-search\"></i></h1>\n                    <form>\n                        {this.state.errorInput}\n                        <br />\n                        <input type=\"text\" name=\"searchValue\" placeholder=\"Search items...\" className=\"input--mod\" required={true} onChange={this.handleInputChange} />\n                        <br />\n                        <br />\n                        <label> Image: &nbsp;\n                        <input name=\"image\" type=\"checkbox\" className=\"space--right\" checked={this.state.image} onChange={this.handleInputChange} />\n                        </label>\n                        <label> Video: &nbsp;\n                        <input name=\"video\" type=\"checkbox\" checked={this.state.video} onChange={this.handleInputChange} />\n                        </label>\n                        <br />\n                        <br />\n                        {this.state.errorCheckBox}\n                    </form>\n                        <br />\n                        <Button btnType=\"Success\" clicked={this.handleSubmit}> Search </Button>\n                    <div className=\"items\">  \n                        {items}\n                    </div>\n                    <br />\n                </div>\n            </Aux>\n        );\n    };\n\n}\n\nexport default withRouter(NasaSearch);","import React from \"react\";\n\nimport './TheSelectedItem.css';\n\nconst theSelectedItem = (props) => (\n    <article className=\"item\" onClick={props.clicked}>\n        <h2>{props.title}</h2>\n        <p className=\"center--text\">Center: {props.center}</p>\n        <p className=\"desc--text\">{props.desc}</p>\n        {\n            props.image ?\n            <div>\n                <img src={props.name} alt=\"Nasa\" width=\"600\" height=\"550\" />\n            </div>\n            :\n            <div>\n                <video width=\"600\" height=\"600\" controls autoPlay loop>\n                    <source src={props.name} type=\"video/mp4\"/>\n                    Your browser does not support the video tag.\n                </video>\n            </div>\n        }\n    </article>\n);\nexport default theSelectedItem;","import React, { Component } from \"react\";\nimport axios from 'axios';\nimport {withRouter} from \"react-router-dom\";\n\nimport './SelectedItem.css';\nimport Button from '../../../components/UI/Button/Button';\nimport TheSelectedItem from '../../../components/TheSelectedItem/TheSelectedItem';\n\nclass SelectedItem extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            assets: [],\n            filteredAssets: []\n        }\n    }\n\n    componentDidMount() {\n        const searchValue = this.props.itemId; \n        axios.get(`https://images-api.nasa.gov/asset/${searchValue}`)\n            .then( res => {\n                const items = res.data.collection.items.slice(0,1);\n                const updatedItems = items.map(item => {\n                    return {\n                        ...item\n                    }\n                });\n                this.setState({ assets: updatedItems, filteredAssets: updatedItems });\n            })\n            .catch(err => {\n                console.log(err);\n            });\n    }\n\n    handleBackClick = () => {\n        this.props.history.push(\"/\");\n    }\n\n    render() {\n        let items = <p className=\"no--item\"> Your Item Was Not Found, Please Press Back and Try again!</p>\n        if ((this.props.itemImg === true && this.props.itemVid === false) || (this.props.itemImg === false && this.props.itemVid === true)) {\n            if (this.state.filteredAssets.length < 1) {\n            } else {\n                items = this.state.filteredAssets.map(item => {\n                    return  (\n                        <TheSelectedItem\n                        key={item.href}\n                        name={item.href}\n                        title={this.props.title}\n                        center={this.props.center}\n                        desc={this.props.desc}\n                        image={this.props.itemImg}\n                        video={this.props.itemVid}\n                        />\n                    );\n                });\n            }\n        }\n\n        return (\n            <div className=\"nasa__box\">\n                <Button btnType=\"Danger\" clicked={this.handleBackClick}>Back</Button>\n                <h2>Your Selection <i className=\"far fa-images space--inbetween\"></i><i className=\"fas fa-video\"></i></h2>\n                <div className=\"items\">\n                    {items}\n                </div>\n                <br />\n            </div>\n        );\n    }\n}\n\nexport default withRouter(SelectedItem);","import React, { Component } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\n\nimport './App.css';\nimport NasaSearch from './containers/NasaSearch/NasaSearch';\nimport SelectedItem from './containers/NasaSearch/SelectedItem/SelectedItem';\nimport Aux from './hoc/Aux';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      itemId: null,\n      itemImage: false,\n      itemVideo: false,\n      title: '',\n      desc: '',\n      center: '',\n    }\n  }\n\n  handleItemInfo = (id, img, video, title, center, desc) => {\n    this.setState({ itemId: id, itemImage: img, itemVideo: video, title: title, center: center, desc: desc });\n  }\n\n  render() {\n    let routes = (\n      <Switch>\n        <Route path=\"/selectedItem\" render={(props) => <SelectedItem {...props} itemId={this.state.itemId} itemImg={this.state.itemImage} itemVid={this.state.itemVideo} title={this.state.title} center={this.state.center} desc={this.state.desc} />}/>\n        <Route path=\"/\" exact render={(props) => <NasaSearch {...props} onItemInfo={this.handleItemInfo} />}/>\n        <Redirect to=\"/\" />\n      </Switch>\n    );\n\n    return (\n      <Aux>\n        <header className=\"App-header\">\n          {routes}\n        </header>\n      </Aux>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst app = (\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}